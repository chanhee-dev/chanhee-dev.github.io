<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[Chanhee's Dev Blog]]></description><link>https://chanhee-dev.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 08 Dec 2021 17:36:12 GMT</lastBuildDate><item><title><![CDATA[프론트엔드 트렌드 관련 사이트 4개]]></title><description><![CDATA[오늘은 프론트엔드 개발 트랜드를 파악하기 위해 참고하기 좋은 사이트…]]></description><link>https://chanhee-dev.github.io/javascript-trending-sites/</link><guid isPermaLink="false">https://chanhee-dev.github.io/javascript-trending-sites/</guid><pubDate>Thu, 09 Dec 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;오늘은 프론트엔드 개발 트랜드를 파악하기 위해 참고하기 좋은 사이트 4가지를 &lt;strong&gt;간단한 설명, 장점, 단점, 총평&lt;/strong&gt; 순서로 정리해 보았습니다. 프론트엔드 생태계가 워낙 빠르게 변하다 보니, 트랜드를 금방 놓쳐 버리기 쉬운데요, 아래 사이트들이 여러분께 많은 도움이 되었으면 좋겠습니다.&lt;/p&gt;
&lt;h1&gt;1. &lt;a href=&quot;http://Javascripting.com&quot;&gt;Javascripting.com&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.javascripting.com/&quot;&gt;JavaScripting.com - The Database of JavaScript Libraries&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/95137946/145252958-c0584404-1c87-406f-b2f6-69c0322f0067.png&quot; alt=&quot;javascripting site screenshot&quot;&gt;&lt;/p&gt;
&lt;h2&gt;간단한 설명&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.javascripting.com/&quot;&gt;Javascripting.com&lt;/a&gt;은 자바스크립트 라이브러리 순위를 Animation, Video, Forms 등 기능별로 모아 놓은 사이트입니다.  Popular, New, Trending, 세 가지 정렬 기준을 제공하며, 라이브러리의 README 파일과 Repository까지 사이트에서 바로 확인할 수 있습니다. &lt;code class=&quot;language-text&quot;&gt;Submit a Library&lt;/code&gt; 메뉴를 통해 사이트 이용자들이 라이브러리를 직접 등록하는 형태로 운영하는 것 같은데, 그러다 보니 간혹 등록되지 않은 라이브러리들도 있습니다.&lt;/p&gt;
&lt;h2&gt;장점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;UI / UX가 깔끔하고 직관적이기 때문에, 사용하기 쉽다.&lt;/li&gt;
&lt;li&gt;기능별로 모아 놓아서, 특정 용도에 맞는 라이브러리 순위를 쉽게 확인할 수 있다.&lt;/li&gt;
&lt;li&gt;라이브러리별 README.md와 Repository를 사이트에서 바로 볼 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;아쉬운 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;개인적으로 붉은 배경의 Header가 거슬린다.&lt;/li&gt;
&lt;li&gt;다크 모드도 따로 지원되지 않기 때문에, 시각적 피로가 클 것 같다.&lt;/li&gt;
&lt;li&gt;데이터의 정확성이 낮다.&lt;/li&gt;
&lt;li&gt;간혹 등록되지 않은 라이브러리도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;총평&lt;/h2&gt;
&lt;p&gt;프론트에서 이런 기능이 필요한데, 쓸만한 라이브러리 없나? 싶을 때 유용한 사이트입니다. 사이트에 등록돼 있지 않은 라이브러리들도 꽤 있으니, 참고 정도만 하시는 것이 좋겠습니다. 한 가지 예를 들면, React App에서 form 검증을 위한 라이브러리로 formik을 많이 쓰는 것으로 알고 있는데, 사이트에 등록조차 안 돼 있습니다.&lt;/p&gt;
&lt;p&gt;사이트의 정확성은 꽤 낮은 편입니다. 인기순 정렬 결과와 &lt;a href=&quot;https://www.npmtrends.com/&quot;&gt;npmtrends&lt;/a&gt;의 결과가 일치하지 않는 문제가 있네요. 그리고 가끔 페이지 이동 시 레이아웃이 중첩되어 보이는 이슈가 발생합니다.&lt;/p&gt;
&lt;h1&gt;2. &lt;a href=&quot;http://stateofjs.com&quot;&gt;stateofjs.com&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://2020.stateofjs.com/en-US/&quot;&gt;State of JS 2020&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;간단한 설명&lt;/h2&gt;
&lt;p&gt;stateofjs.com은 1년에 한 번, 자바스크립트 생태계의 전반적인 트랜드를 조사하여 인포그래픽 형태로 제공하는 사이트입니다. 자바스크립트 문법, 프레임워크, 디자인 패턴, 테스팅 툴 등 다양한 항목에 대해 개발자들의 사용 현황, 만족도 등을 조사한 데이터입니다.&lt;/p&gt;
&lt;h2&gt;장점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트 생태계 전반적인 트랜드를 이해하는 데 도움이 된다.&lt;/li&gt;
&lt;li&gt;사이트 내 모든 통계 데이터를 JSON / graphQL로 export할 수 있다.&lt;/li&gt;
&lt;li&gt;기본 테마가 다크 모드이기 때문에 시각적으로 편안한 느낌을 준다.&lt;/li&gt;
&lt;li&gt;데이터 시각화가 깔끔하게 잘 되어 있다.&lt;/li&gt;
&lt;li&gt;각각의 메뉴와 그래프 하나하나마다 애니메이션이 정말 잘 구현돼 있다.&lt;/li&gt;
&lt;li&gt;어색하긴 하지만, 한국어 지원이 돼 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;아쉬운 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;업데이트가 1년에 한 번 이뤄진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;총평&lt;/h2&gt;
&lt;p&gt;일단 보는 재미가 있는 사이트입니다. 업데이트가 1년에 한 번 이뤄진다는 것이 가장 아쉽네요. 재밌게 보던 드라마가 조기 종영하는 느낌 같습니다.&lt;/p&gt;
&lt;p&gt;자바스크립트 생태계를 이해하는 데 큰 도움이 될 것 같습니다. 모든 데이터를 export할 수 있게 구성했다는 점도 굉장히 세련됐다고 생각하는데, 사이트가 워낙 잘 되어 있어 굳이 가져다 쓸 일이 있을까 싶긴 하네요.&lt;/p&gt;
&lt;p&gt;다만 다른 사이트들도 마찬가지 듯, 대부분이 해외 개발자들의 응답을 집계한 데이터이기 때문에, 국내 개발 트랜드와는 맞지 않는 부분이 있을 수도 있습니다.&lt;/p&gt;
&lt;h1&gt;3. &lt;a href=&quot;http://npmtrends.com&quot;&gt;npmtrends.com&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmtrends.com/&quot;&gt;npm trends: Compare NPM package downloads&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;간단한 설명&lt;/h2&gt;
&lt;p&gt;워낙 유명한 사이트이죠. 라이브러리 다운로드 수 비교 사이트입니다.&lt;/p&gt;
&lt;h2&gt;장점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;두 개 이상의 라이브러리를 비교하기 좋다.&lt;/li&gt;
&lt;li&gt;특정 라이브러리를 입력하면, 그와 관련된 라이브러리까지 추천해 준다.&lt;/li&gt;
&lt;li&gt;라이브러리의 npm 문서까지 페이지에서 같이 보여준다. (하나만 입력한 경우)&lt;/li&gt;
&lt;li&gt;라이브러리가 등장한 시점부터 데이터가 제공되기 때문에 트랜드를 파악하기 쉽다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;단점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;없음&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;총평&lt;/h2&gt;
&lt;p&gt;두 개 이상의 라이브러리 선택에서 고민하고 있다면, 가장 먼저 찾는 사이트입니다. 아쉬운 점은 딱히 없습니다.&lt;/p&gt;
&lt;h1&gt;4. &lt;a href=&quot;https://insights.stackoverflow.com/survey/2021#top-paying-technologies-web-frameworks&quot;&gt;Stack Overflow Developer Survey 2021&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://insights.stackoverflow.com/survey/2021#top-paying-technologies-web-frameworks&quot;&gt;Stack Overflow Developer Survey 2021&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;간략한 설명&lt;/h2&gt;
&lt;p&gt;해마다 stackoverflow 개발자들 대상으로 성별, 연령, 연봉 등의 인구통계학 정보 및 기술 선호도를 조사하여 결과를 보여주는 사이트입니다.&lt;/p&gt;
&lt;h2&gt;장점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;stackoverflow에서 운영하는 사이트인 만큼, 데이터 신뢰도가 높다.&lt;/li&gt;
&lt;li&gt;다른 개발 직군과 프론트엔드 개발 직군의 위치를 비교해 볼 수 있다.&lt;/li&gt;
&lt;li&gt;개발자들의 인구통계학 자료가 거의 없어, 꽤 흥미로운 데이터이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;아쉬운 점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;전 개발 직군 모두를 다루다 보니, 프론트엔드만 확인하기는 어렵다.&lt;/li&gt;
&lt;li&gt;역시 해외 개발자 기준 데이터이기 때문에, 국내 상황과는 맞지 않을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;총평&lt;/h2&gt;
&lt;p&gt;세상에는 정말 다양한 개발자들이 존재한다는 것을 실감할 수 있습니다. 프론트엔드 개발자가 비교적 등장한 지 얼마 안 된 직군이라서 그런지, 연봉이나 경력이 다른 개발자들에 비하면 꽤 낮은 편이네요. 사이트 들어가 보시면 재밌는 데이터들도 꽤 많으니, 한 번쯤 들어가 보시는 것을 추천합니다.&lt;/p&gt;
&lt;h1&gt;결론&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;프론트엔드 생태계의 전반적인 흐름을 파악하고 싶다 → &lt;strong&gt;stateofjs.com&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;두 개 이상의 라이브러리 중 뭘 선택할지 고민이다 → &lt;strong&gt;npmtrends&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;다른 개발 업계와 프론트엔드 업계를 비교해 보고 싶다 → &lt;strong&gt;stackoverflow developer survey&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;특정 기능 구현에 필요한 라이브러리를 찾고 있다 → &lt;strong&gt;javascripting.com&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[오픈소스 프로젝트 회고록]]></title><description><![CDATA[오픈소스 프로젝트 회고록 지난 7월, 과학기술정보통신부에서 주최하는 을 통해 첫 오픈소스 프로젝트를 경험해 보았습니다. 우리 팀의 목표는 3개월 동안 react용 GA…]]></description><link>https://chanhee-dev.github.io/open-source-review/</link><guid isPermaLink="false">https://chanhee-dev.github.io/open-source-review/</guid><pubDate>Tue, 07 Dec 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;오픈소스 프로젝트 회고록&lt;/h1&gt;
&lt;p&gt;지난 7월, 과학기술정보통신부에서 주최하는 &lt;code class=&quot;language-text&quot;&gt;&quot;오픈소스 컨트리뷰톤 2021&quot;&lt;/code&gt;을 통해 첫 오픈소스 프로젝트를 경험해 보았습니다. 우리 팀의 목표는 3개월 동안 react용 GA 라이브러리인 &lt;code class=&quot;language-text&quot;&gt;react-ga&lt;/code&gt;를 개발하고, 라이브러리 가이드 문서를 만드는 것이었습니다. 오늘은 첫 오픈소스 프로젝트를 진행하며 개인적으로 부족했다고 느꼈던 점을 회고하려 합니다.&lt;/p&gt;
&lt;h2&gt;팀원들 간의 소통에 적극적으로 참여했다면 어땠을까?&lt;/h2&gt;
&lt;p&gt;커뮤니케이션 채널이 많아지면서, 협업 속도를 따라가기가 힘들었습니다. 팀 단위로 개발하다 보면, 용도에 따라 여러 협업 툴을 이용하는 경우가 많죠. 소스 및 이슈 관리, 문서 관리, Discussion 등 개발에 필요한 업무들을 하나의 툴 안에서 소화하기가 힘들기 때문입니다. 우리는 오픈소스 프로젝트를 진행하며 다음과 같은 채널들을 활용했습니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Channel&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;License Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Slack&lt;/td&gt;
&lt;td&gt;일상적 대화, 공지 전달, github 알림&lt;/td&gt;
&lt;td&gt;무료&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Notion&lt;/td&gt;
&lt;td&gt;회의록 및 리서치 자료 저장&lt;/td&gt;
&lt;td&gt;유료&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Github&lt;/td&gt;
&lt;td&gt;소스 관리 및 discussion, 코드 리뷰&lt;/td&gt;
&lt;td&gt;무료&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Google meets&lt;/td&gt;
&lt;td&gt;화상 회의&lt;/td&gt;
&lt;td&gt;무료&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Email&lt;/td&gt;
&lt;td&gt;주최 측 공지 전달&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;물론, 이런 상황에도 불구하고, 커뮤니케이션 속도를 잘 따라오는 팀원들이 대부분이였으나, 저는 친구에게 온 카톡도 하루 지나서 답장하는 메신저 혐오자에요. 그런 성격 탓에 f/u이 많이 뒤쳐졌고, 그러면서 한 가지 느꼈던 점은, 커뮤니케이션도 개발의 연장이라는 것입니다.&lt;/p&gt;
&lt;p&gt;오픈소스 프로젝트 특성 상, Kick-Off를 기점으로 한 달 동안은 이슈가 굉장히 빠르게 올라갑니다. 다들 열의에 가득 찬 상태이기 때문이죠. 이 기간에 커뮤니케이션 속도를 따라가지 못하면 이슈 관련 논의 사항을 놓치게 되고, 개발에 차질이 생길 수 있습니다. 프로젝트 방향성을 못 잡고 혼자 헤매거나, 협의 된 사항과 맞지 않는 코드를 올려 몇번씩 리뷰를 받는 등의 문제가 발생할 수 있는 것이죠.&lt;/p&gt;
&lt;h2&gt;조금만 적극적이었다면 어땠을까?&lt;/h2&gt;
&lt;p&gt;제가 적극적이지 못했던 이유는 “내가 올린 코드로 인해 에러가 발생하면 어떡하지?”라는 생각이 있었기 때문입니다.&lt;/p&gt;
&lt;p&gt;우리 프로젝트는 react-ga 라이브러리 개발 팀과, 가이드 문서 개발 팀으로 나뉘었는데, 개인적으로 라이브러리 개발은 경험도 없고, 코드를 잘못 올리기라도 한다면 엄청난 문제를 일으킬 것 같은 막연한 불안감이 있었습니다. 그래서 저는 가이드 문서 개발 팀으로 참여했는데, 프로젝트가 끝나갈 무렵  “이 기회가 아니면 팀 단위로 라이브러리를 개발하여 배포까지 진행해 볼 일이 있을까?”하는 생각이 들어 많이 아쉬웠습니다.&lt;/p&gt;
&lt;h2&gt;조금 겸손했다면 어땠을까?&lt;/h2&gt;
&lt;p&gt;“2년차 개발자 정도면 나름 프로”라는 거만함이 있었습니다. 우리 팀은 대학생 절반, 직장인 절반 정도로 구성되어 있었는데, 그래서 인지 대학생들에게 리뷰를 받는다는 것에 대한 일종의 거부감 같은 것이 있었나 봐요. 하지만 이런 몹쓸 생각은 일주일 이상 가지 않았습니다. 저보다 개발을 더 잘하는 대학생 팀원이 있었기 때문입니다. 그러자 코드 리뷰에 대한 거부감은 불안감으로 바뀌었고, “스스로 나름 프로라고 생각했는데, 저들에게 내 코드를 지적 당하면 어떡하지?”라는 생각이 머릿속을 지배하기 시작했습니다. 부끄럽지만, 그런 이유로 며칠 동안 커밋을 올리지 못한 적도 있습니다.&lt;/p&gt;
&lt;p&gt;사실, 이런 태도는 개발 커리어를 이어나가는 데 큰 장애물이 됩니다. 두려움이든 거부감이든 리뷰 받기를 꺼린다면, 프로젝트 진행에 차질을 빚을 수도 있음은 물론, ‘고인물’로 가는 지름길이기 때문이죠. 다행히 컨트리뷰톤 기간 안에 이런 점을 깨달았고, 오히려 제가 먼저 궁금한 점을 물어보기 시작했습니다.&lt;/p&gt;
&lt;h2&gt;명확한 목표를 갖고 시작했으면 어땠을까?&lt;/h2&gt;
&lt;p&gt;“1일 1커밋”, “1주일 최소 3리뷰” 등의 구체적인 목표가 딱히 없었습니다. 같은 기능을 구현하더라도, 확실히 오픈소스 프로젝트가 훨씬 힘들게 느껴지기 마련입니다. 다른 사람의 커밋으로 인해 나의 local 개발 환경이 꼬이기도 하고, (부정적인 의미가 아니라) 사공이 많으니, 개발 프로세스도 보수적이기 때문이죠. 이런 힘든 상황에서는 명확한 목표 설정이 특히 중요합니다. 사기가 꺾이지 않도록, 꾸준히 자신을 움직이게 할 지표가 되어 주기 때문입니다.&lt;/p&gt;
&lt;h2&gt;반성문&lt;/h2&gt;
&lt;p&gt;앞으로는 메신저 확인하는 것을 습관화하고, f/u을 잘해야겠습니다.  또, 요새는 크롬 배경화면에서 여러 협업 툴을 한눈에 모니터링할 수 있도록 확장 프로그램을 하나 개발하고 있어요.&lt;/p&gt;
&lt;p&gt;앞으로는 조금 겸손해지겠습니다. 오픈소스 프로젝트를 진행하면서 세상은 넓고 개발자는 많다는 것을 깨달았습니다. 다시 한번 성장하는 기회가 되겠네요.&lt;/p&gt;
&lt;p&gt;다음 오픈소스 프로젝트부터는 명확한 목표를 갖고 시작하겠습니다. 처음에는 너무 크지 않게 3일 1커밋 정도로 해볼까 합니다.&lt;/p&gt;</content:encoded></item></channel></rss>